                                                ╬═════════════════════════════╗
                                                ║ Task/L, from bytes to bytes ║
  ByteString                                    ╚═════════════════════════════╬
  ──╥───────
    ╟╴Parse as YAML (perhaps also JSON in the future).
    ╬
  [Tree [ByteString]]
  ──╥────────────────
    ╟╴Interpret tree as patterns that depend on patterns that depend on
    ║ patterns...patterns all the way down.
    ╬
  [Tree Task]                              [Name]
  ──╥────────                              ──╥───
    ╟────────────────────────────────────────╜
    ╟╴Treat the tree of tasks as a tree of defintions trim it to include only
    ║ the definitions specififed by the user (or just take all tasks, if the
    ║ user does not specify).
    ╬
  [Tree Task]
  ──╥────────
    ╟╴Transform trees in to adjacency list format, for use with graph library.
    ╬
  [(Task, [Task])]
  ──╥─────────────
    ╟╴Generate a graph of commands' dependencies on one another and examine
    ║ the strongly connected components of the graph to produce a linear
    ║ schedule. (If cycles are detected at this phase, it is an error.)
    ╬
  [Task]
  ──╥───
    ╟╴Reduce tasks to simple shell commands. Abstract tasks -- which serve to
    ║ group tasks under a name -- are turned in to commands to print a
    ║ message about the task.
    ╬
  [Cmd]
  ──╥──
    ╟╴Compile the commands to shell, wrapping commands which are URLs in calls
    ║ to cURL, and embed them in the template script.
    ╬
  ByteString

